#!/usr/bin/env python3
from collections import OrderedDict, defaultdict
from pathlib import Path
import os
import json
import yaml
import re
import redo
redo.ifchange('comap.py'); import comap

"""

!!DEPRECATED!!

GIVEN DB, V -- databases and vocabularies of databases
GIVEN mapping: { db: {code_{V_db}} | db ∈ DB }
PARAMETER Rel: { R } -- the relations for expansions

generated_0 : {cui} -- CUIs of concepts as generated by CodeMapper
dnf : {{cui}} -- The maximum recall DNF for the mapping

related_i = { cui_2 |  cui_1 ∈ generated_i, R ∈ Rel: cui_1 R _cui_2 ∈ UMLS }
generated_{i+1} = generated_i ∪ (related_i ∩ cuis(dnf))

RESULT evaluate(generated_n, solve(generated_n, dnf))

WHERE

cuis : dnf:{{cui}} → {cui} -- All variables (CUIs) of a DNF on CUIs

solve : cuis:{cui} × dnf:{{cui}} → {cui} -- Simplify a DNF to a conjunction by selecting CUIs from the first argument where possible
"""

project, outcome_id = redo.base.split('.')
project_path = Path('projects') / project

with redo.ifchange(evaluation_config=project_path / 'evaluation-config.yaml',
                   max_recall_dnf='{}.{}.max-recall-dnf.yaml'.format(project, outcome_id),
                   baseline_evaluation='{}.baseline.evaluation.yaml'.format(project))\
        as files:
    evaluation_config = yaml.load(files['evaluation_config'])
    reference_dnf = yaml.load(files['max_recall_dnf'])['dnf']
    generated_cuis = yaml.load(files['baseline_evaluation'])\
        ['by-outcome'][outcome_id]['generated-cuis']

client = comap.ComapClient()


def solve_dnf(generated_cuis, reference_dnf):
    reference_cuis = set()
    for cuis_disjunction in reference_dnf:
        intersection = set(generated_cuis) & set(cuis_disjunction)
        if intersection:
            reference_cuis.add(intersection.pop())
        else:
            reference_cuis.add(cuis_disjunction[0])
    return reference_cuis


def create_result(generated_cuis, reference_cuis, expansions):
    confusion = comap.confusion_matrix(generated_cuis, reference_cuis)
    measures = comap.measures(generated=generated_cuis, reference=reference_cuis)
    return OrderedDict([
        ('confusion', confusion),
        ('measures', measures),
        ('expansions', expansions),
    ])


__related_cache = {}
def cache_related(generated_cuis, relations):
    arg = (frozenset(generated_cuis), frozenset(relations))
    if arg in __related_cache:
        return __related_cache[arg]
    else:
        res = client.related(generated_cuis, relations, [])
        __related_cache[arg] = res
        return res


def expansion(generated_cuis, reference_dnf, relations, depth):
    generated_cuis, reference_dnf = set(generated_cuis), list(list(c) for c in reference_dnf)
    reference_cuis = set(cui for cuis in reference_dnf for cui in cuis)
    expansions = defaultdict(set)
    for _ in range(depth):
        related = cache_related(generated_cuis, relations)
        for cui in related:
            for rel in related[cui]:
                for concept in related[cui][rel]:
                    related_cui = concept['cui']
                    if related_cui in reference_cuis:
                        generated_cuis.add(related_cui)
                        expansions[cui].add(related_cui)
    reference_cuis = solve_dnf(generated_cuis, reference_dnf)
    expansions = OrderedDict([(cui, sorted(expansions[cui]))
                              for cui in sorted(expansions)])
    return create_result(generated_cuis, reference_cuis, expansions)


def create_results(generated_cuis, reference_dnf):
    res = OrderedDict([
        ('by-variant', OrderedDict())
    ])
    relations = ['RN', 'CHD', 'RB', 'PAR']

    res['by-variant']['expand0'] =\
        expansion(generated_cuis, reference_dnf, [], 0)

    res['by-variant']['expand1-'+'-'.join(relations)] =\
        expansion(generated_cuis, reference_dnf, relations, 1)

    res['by-variant']['expand2-'+'-'.join(relations)] =\
        expansion(generated_cuis, reference_dnf, relations, 2)

    res['by-variant']['expand3-'+'-'.join(relations)] =\
        expansion(generated_cuis, reference_dnf, relations, 3)

    res['by-variant']['expand3-'+'-'.join(relations)] =\
        expansion(generated_cuis, reference_dnf, relations, 4)

    return res


result = create_results(generated_cuis, reference_dnf)

with redo.output() as f:
    yaml.dump(result, f)
