#!/usr/bin/env python3
import pandas as pd
from pathlib import Path
import os
import argparse
import tkinter as tk
from tkinter import filedialog, messagebox
import sys

HELP = """
This program connects the code counts resulting from the event fingerprinting
with the code sets that were generated with CodeMapper. It runs on the code
counts on all events from one database at once.

Please select the files and click `Run`. Variables marked with stars are
obligatory.

Vocabularies*:
The CodeMapper/UMLS vocabularies for the database

Code counts*:
A CSV file with the code counts generated in event fingerprinting.

Code names:
A CSV file with local code names for the database (columns `Code`, `Name`)

Mappings*:
The code sets for the events as generated by CodeMapper in XLS files.

Output*:
The output XLS file.

Questions to b.becker@erasmusmc.nl
""".strip()


EXCLUDE_RCD2_CODES = ['_DRUG', '_NONE', '2....']


def get_code_names(csv_filename):
    """Read code names, including DB-specific codes. Should be a CSV with columns
    `Code` and `Name`."""
    if csv_filename:
        return (
            pd.read_csv(csv_filename, None, engine='python')
            .assign(Name=lambda df: df.Name.fillna('??'))
            [['Code', 'Name']]
        )
    else:
        return pd.DataFrame(columns=['Code', 'Name'])


def get_code_counts(csv_filename):
    """Read and adapt the code counts that were generated in event fingerprinting.
    Must be a TSV with columns `Database`, `EventType`, `EventCode`, `Count`,
    `FirstCount`."""
    return (
        pd.read_csv(csv_filename, sep=None, engine='python')
        .rename(columns={
            'EventCode': 'Extracted code',
            'EventType': 'Event'
        })
        [['Event', 'Extracted code', 'Count', 'FirstCount']]
    )


def get_mappings(comap_xls_files, vocabularies):
    return pd.concat([
        (pd.read_excel(filename, sheetname='Codes')
         .rename(columns={'Coding system': 'Vocabulary'}))
         .pipe(lambda df: df[df.Vocabulary.isin(vocabularies)])
         .pipe(lambda df: df[df.Code != '-'])
         .pipe(lambda df: df[(df.Vocabulary != 'RCD2') | ~df.Code.isin(EXCLUDE_RCD2_CODES)])
         .drop_duplicates('Code')
         .assign(Event=Path(filename).name[:-4])
        [['Event', 'Vocabulary', 'Concept', 'Concept name', 'Code', 'Code name']]
        for filename in comap_xls_files
    ]).reset_index(drop=True)


def get_mapped_codes(code_counts, mappings):
    SEP = '/'
    extracted = code_counts.Event + SEP + code_counts['Extracted code']
    mapped_set = set(mappings.Event + SEP + mappings.Code)
    def search_prefix(code):
        # Search mapped code that is a prefix
        for N in range(0, len(code)-1):
            if N != 0 and code[-N] == SEP:
                break
            prefix = code[:-N] if N else code
            if prefix in mapped_set:
                return prefix[prefix.index(SEP)+1:]
        # Search mapped code that is a prefix, case-insensitive
        for N in range(0, len(code)-1):
            if N != 0 and code[-N] == SEP:
                break
            prefix = code[:-N] if N else code
            try:
                s = next(c for c in mapped_set if prefix.lower() == c.lower())
                return s[s.index(SEP)+1:]
            except StopIteration:
                pass
        return '???'
    return extracted.map(search_prefix)


def run(vocabularies, code_counts_csv, code_names_csv, comap_xls_files, output_xls):
    mappings    = get_mappings(comap_xls_files, vocabularies) # Event × Vocabulary × Code
    code_names  = get_code_names(code_names_csv)              # Code × Name
    code_counts = get_code_counts(code_counts_csv)            # Event × Extracted code × Count × FirstCount
    code_counts['Code'] = get_mapped_codes(code_counts, mappings)
    res = (
        mappings
        .merge(code_counts, how='outer', on=['Event', 'Code'])
        .merge(code_names.rename(columns={
            'Code': 'Extracted code',
            'Name': 'Extracted code name'
        }), how='left', on='Extracted code')
        .sort_values(['Event', 'Code'])
    )
    res['Extracted code'] = res['Extracted code'].fillna('-')
    res['Extracted code name'] = res['Extracted code name'].fillna('')
    res['Count'] = res['Count'].fillna(0)
    res['FirstCount'] = res['FirstCount'].fillna(0)
    res.to_excel(output_xls, index=False)


def main_command_line():
    parser = argparse.ArgumentParser()
    parser.add_argument('--vocabularies', metavar='STR', nargs="*", required=True,
                        help="CodeMapper/UMLS vocabularies for the database")
    parser.add_argument('--code-counts', metavar='FILE', required=True,
                        help="A CSV file with the code counts generated in event fingerprinting")
    parser.add_argument('--code-names', metavar='FILE', required=True,
                        help="A CSV file with local code names for the database")
    parser.add_argument('--mappings', metavar='FILE', nargs="*", required=True,
                        help="A list of XLS file containing the event mappings generated by CodeMapper")
    parser.add_argument('--output', metavar='FILE', required=True,
                        help="Output XLS file")
    args = parser.parse_args()
    run(args.vocabularies, args.code_counts, args.code_names,
        args.comap_mappings, args.output)


class TkApplication(tk.Frame):

    def __init__(self, master=None):
        super().__init__(master)

        self.code_counts = None
        self.code_names = None
        self.comap_mappings = None
        self.output = None

        self.master.rowconfigure(0, weight=1)
        self.master.columnconfigure(0, weight=1)
        self.grid(sticky='NESW')

        row=0

        (tk.Button(self, text="Help", command=self.help)
         .grid(row=row, column=0, columnspan=3, sticky='NESW'))
        row += 1

        (tk.Label(self, text="Vocabularies*:")
         .grid(row=row, column=0, sticky='NWS'))
        self.vocabularies_entry = tk.Entry(self)
        self.vocabularies_entry.grid(row=row, column=1, columnspan=2, sticky='NESW')
        row += 1

        (tk.Label(self, text="Code counts*:")
         .grid(row=row, column=0, sticky='NWS'))
        self.code_counts_label = tk.Label(self)
        self.code_counts_label.grid(row=row, column=1, sticky='NES')
        (tk.Button(self, text="Choose", command=self.choose_code_counts)
         .grid(row=row, column=2, sticky='NESW'))
        row += 1

        (tk.Label(self, text="Code names:")
         .grid(row=row, column=0, sticky='NWS'))
        self.code_names_label = tk.Label(self)
        self.code_names_label.grid(row=row, column=1, sticky='NES')
        (tk.Button(self, text="Choose", command=self.choose_code_names)
         .grid(row=row, column=2, sticky='NESW'))
        row += 1

        (tk.Label(self, text="Mappings*:")
         .grid(row=row, column=0, sticky='NWS'))
        self.comap_mappings_label = tk.Label(self)
        self.comap_mappings_label.grid(row=row, column=1, sticky='NES')
        (tk.Button(self, text="Choose", command=self.choose_comap_mappings)
         .grid(row=row, column=2, sticky='NESW'))
        row += 1

        (tk.Label(self, text="Output file*:")
         .grid(row=row, column=0, sticky='NWS'))
        self.output_label = tk.Label(self)
        self.output_label.grid(row=row, column=1, sticky='NES')
        (tk.Button(self, text="Choose", command=self.choose_output_file)
         .grid(row=row, column=2, sticky='NESW'))
        row += 1

        (tk.Button(self, text="Run", command=self.run)
         .grid(row=row, column=0, columnspan=3, sticky='NESW'))
        row += 1

    def choose_code_counts(self):
        self.code_counts = filedialog.askopenfilename(parent=self.master,
            filetypes=[('TXT/CSV/TSV files', ('.csv', '.tsv', '.txt')), ('All files', '.*')])
        self.code_counts_label.config(text=Path(self.code_counts).name if self.code_counts else '')

    def choose_code_names(self):
        self.code_names = filedialog.askopenfilename(parent=self.master,
            filetypes=[('TXT/CSV/TSV files', ('.csv', '.tsv', '.txt')), ('All files', '.*')])
        self.code_names_label.config(text=Path(self.code_names).name if self.code_names else '')

    def choose_comap_mappings(self):
        self.comap_mappings = filedialog.askopenfilenames(parent=self.master,
            filetypes=[('XLS files', '.xls'), ('All files', '.*')])
        text = ''
        if self.comap_mappings:
            text = ', '.join(Path(f).name[:-4] for f in self.comap_mappings)
        self.comap_mappings_label.config(text=text)

    def choose_output_file(self):
        self.output = filedialog.asksaveasfilename(parent=self.master,
            defaultextension='.xls', filetypes=[('XLS files', '.xls')])
        self.output_label.config(text=Path(self.output).name if self.output else '')

    def help(self):
        messagebox.showinfo("Code counts to mappings", HELP)

    def get_vocabularies(self):
        return self.vocabularies_entry.get().split(' ')

    def run(self):
        vocabularies = self.get_vocabularies()
        if os.path.isfile(self.output):
            res = messagebox.askyesno("File exists", "File {} already exists. Overwrite?".format(self.output))
            print(res)
        if vocabularies and self.code_counts and self.comap_mappings and self.output:
            if res:
                run(vocabularies, self.code_counts, self.code_names, self.comap_mappings, self.output)
        else:
            print(vocabularies, self.code_counts, self.code_names, self.comap_mappings, self.output)


def main_tk():
    master = tk.Tk()
    app = TkApplication(master=master)
    app.mainloop()

if __name__ == '__main__':
    if len(sys.argv) > 1:
        main_command_line()
    else:
        main_tk()
